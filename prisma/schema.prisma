datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    ADMIN
    TEACHER
    STUDENT
}

enum NotifyHow {
    EMAIL
    LINE
    NONE
}

model User {
    id       Int       @id @default(autoincrement())
    email    String    @unique
    name     String?
    password String?
    // 個人資料
    birthday DateTime?
    phone    String?
    image    String?
    lineId   String?

    // 社群帳號
    facebook  String?
    instagram String?

    // 推播通知
    notifyBooking Boolean   @default(false)
    notifyEvent   Boolean   @default(false)
    notifyHow     NotifyHow @default(NONE)

    // 角色
    role Role @default(STUDENT)

    // 登入方式
    provider String @default("credentials")

    // 課程設定
    takeTime   Int @default(0) // 上課時數 單位: 分鐘
    maxStudent Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Booking Booking[] @relation("BookingStudentRelation")

    EventTeacherRelation Event[]               @relation("EventTeacherRelation")
    EventStudentRelation Event[]               @relation("EventStudentRelation")
    StudentWishRegister  StudentWishRegister[] @relation("StudentWishRegisterStudentRelation")
    TeacherWishRegister  StudentWishRegister[] @relation("StudentWishRegisterTeacherRelation")
    RegisteredStudent    RegisteredStudent[]   @relation("RegisteredStudentStudentRelation")
    RegisteredTeacher    RegisteredStudent[]   @relation("RegisteredStudentTeacherRelation")
}

enum StudentWishRegisterStatus {
    PENDING
    REJECTED
    CONFIRMED
}

model StudentWishRegister {
    id Int @id @default(autoincrement())

    studentId Int
    student   User @relation("StudentWishRegisterStudentRelation", fields: [studentId], references: [id])

    teacherId Int
    teacher   User @relation("StudentWishRegisterTeacherRelation", fields: [teacherId], references: [id])

    status StudentWishRegisterStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RegisteredStudent {
    id Int @id @default(autoincrement())

    studentId Int
    student   User @relation("RegisteredStudentStudentRelation", fields: [studentId], references: [id])

    teacherId Int
    teacher   User @relation("RegisteredStudentTeacherRelation", fields: [teacherId], references: [id])
}

enum BookingStatus {
    PENDING
    REJECTED
    EXPIRED
    CONFIRMED
}

model Booking {
    id Int @id @default(autoincrement())

    studentId Int
    student   User @relation("BookingStudentRelation", fields: [studentId], references: [id])

    status BookingStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum EventStatus {
    PENDING
    CANCELLED
    COMPLETED
}

model Event {
    id Int @id @default(autoincrement())

    teacherId Int
    teacher   User @relation("EventTeacherRelation", fields: [teacherId], references: [id])

    startAt DateTime
    endAt   DateTime

    // 日曆標記邏輯
    startRow Int
    spanRows Int

    status EventStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // 一對多學生
    students User[] @relation("EventStudentRelation")
}
